mass_shooting_data$date
mass_shooting_data$date <- substring(mass_shooting_data$date,0,3)
data_by_month <- group_by(mass_shooting_data,date) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
data_by_month$month_num <- c(4,8,12,2,1,7,6,3,5,11,9,10)
data_by_month <- arrange(data_by_month,month_num)
p <- plot_ly(x = data_by_month$date,y = data_by_month$num_injured,name = "Injured", type = "bar")
p2 <- add_trace(p, x = data_by_month$date, y = data_by_month$num_killed,name = "Casualties")
xaxis <- list(title = "Month")
yaxis <- list(title = "Number of People")
layout(p2,barmode = "stack",Title = "2015 Mass Shooting Data",yaxis = yaxis, xaxis = xaxis)
---
title: "Mapping Mass Shootings"
output: html_document
---
```{r,message = FALSE,echo = FALSE}
library(dplyr)
library(knitr)
library(plotly)
mass_shooting_data <- read.csv("/Users/colecansler/Desktop/498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
mass_shooting_data$hover <- paste(mass_shooting_data$city, ": " ,mass_shooting_data$killed," killed"," and ",mass_shooting_data$injured," injured", sep = "")
summary_table <- group_by(mass_shooting_data,state) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
most_deadly <- mass_shooting_data %>%
filter(killed == max(killed))
```
Mass shootings in the United States have become a growing issue in the last couple of years. In 2015 there were `r NROW(mass_shooting_data)` mass shootings in the United States. The most deadly shooting occured in `r select(most_deadly,city)` where there were `r select(most_deadly,killed)` casualties. Overall there have been `r sum(mass_shooting_data$killed)` lives lost due to mass shootings in the past year. This is a significant crisis facing our country today and something must be done.
`r kable(summary_table)`
```{r,message=FALSE,echo=FALSE}
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(mass_shooting_data,lat = lat,lon = lng,marker = list(size = 2.5*killed + injured, color = "red"),text = hover,hoverinfo = "text", type = 'scattergeo',locationmode = 'USA-states') %>%
layout(Title = '2015 US Mass Shootings', geo = g)
```
```{r,message=FALSE,echo=FALSE}
mass_shooting_data$date
mass_shooting_data$date <- substring(mass_shooting_data$date,0,3)
data_by_month <- group_by(mass_shooting_data,date) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
data_by_month$month_num <- c(4,8,12,2,1,7,6,3,5,11,9,10)
data_by_month <- arrange(data_by_month,month_num)
p <- plot_ly(x = data_by_month$date,y = data_by_month$num_injured,name = "Injured", type = "bar")
p2 <- add_trace(p, x = data_by_month$date, y = data_by_month$num_killed,name = "Casualties")
xaxis <- list(title = "Month")
yaxis <- list(title = "Number of People")
layout(p2,barmode = "stack",title = "2015 Mass Shooting Data",yaxis = yaxis, xaxis = xaxis)
View(data_by_month)
---
title: "Mapping Mass Shootings"
output: html_document
---
```{r,message = FALSE,echo = FALSE}
library(dplyr)
library(knitr)
library(plotly)
mass_shooting_data <- read.csv("/Users/colecansler/Desktop/498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
mass_shooting_data$hover <- paste(mass_shooting_data$city, ": " ,mass_shooting_data$killed," killed"," and ",mass_shooting_data$injured," injured", sep = "")
summary_table <- group_by(mass_shooting_data,state) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
most_deadly <- mass_shooting_data %>%
filter(killed == max(killed))
```
Mass shootings in the United States have become a growing issue in the last couple of years. In 2015 there were `r NROW(mass_shooting_data)` mass shootings in the United States. The most deadly shooting occured in `r select(most_deadly,city)` where there were `r select(most_deadly,killed)` casualties. Overall there have been `r sum(mass_shooting_data$killed)` lives lost due to mass shootings in the past year. This is a significant crisis facing our country today and something must be done.
`r kable(summary_table)`
```{r,message=FALSE,echo=FALSE}
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(mass_shooting_data,lat = lat,lon = lng,marker = list(size = 2.5*killed + injured, color = "red"),text = hover,hoverinfo = "text", type = 'scattergeo',locationmode = 'USA-states') %>%
layout(Title = '2015 US Mass Shootings', geo = g)
```
```{r,message=FALSE,echo=FALSE}
mass_shooting_data$date <- substring(mass_shooting_data$date,0,3)
data_by_month <- group_by(mass_shooting_data,date) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
data_by_month$month_num <- c(4,8,12,2,1,7,6,3,5,11,9,10)
data_by_month <- arrange(data_by_month,month_num)
p <- plot_ly(x = data_by_month$date,y = data_by_month$num_injured,name = "Injured", type = "bar")
p2 <- add_trace(p, x = data_by_month$date, y = data_by_month$num_killed,name = "Casualties")
xaxis <- list(title = "Month")
yaxis <- list(title = "Total Number of People")
layout(p2,barmode = "stack",title = "2015 Mass Shooting Data",yaxis = yaxis, xaxis = xaxis)
---
title: "Mapping Mass Shootings"
output: html_document
---
```{r,message = FALSE,echo = FALSE}
# Require neccescary packages and read-in mass_shooting_data
library(dplyr)
library(knitr)
library(plotly)
mass_shooting_data <- read.csv("/Users/colecansler/Desktop/498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
# Add hover text
mass_shooting_data$hover <- paste(mass_shooting_data$city, ": " ,mass_shooting_data$killed," killed"," and ",mass_shooting_data$injured," injured", sep = "")
# Create table that summarizes data by state
summary_table <- group_by(mass_shooting_data,state) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
# Determine the deadliest incident of gun violence
most_deadly <- mass_shooting_data %>%
filter(killed == max(killed))
```
Mass shootings in the United States have become a growing issue in the last couple of years. In 2015 there were `r NROW(mass_shooting_data)` mass shootings in the United States. The most deadly shooting occured in `r select(most_deadly,city)` where there were `r select(most_deadly,killed)` casualties. Overall there have been `r sum(mass_shooting_data$killed)` lives lost due to mass shootings in the past year. This is a significant crisis facing our country today and something must be done.
`r kable(summary_table)`
```{r,message=FALSE,echo=FALSE}
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
plot_ly(mass_shooting_data,lat = lat,lon = lng,marker = list(size = 2.5*killed + injured, color = "red"),text = hover,hoverinfo = "text", type = 'scattergeo',locationmode = 'USA-states') %>%
layout(title = '2015 US Mass Shootings', geo = g)
```
```{r,message=FALSE,echo=FALSE}
mass_shooting_data$date <- substring(mass_shooting_data$date,0,3)
data_by_month <- group_by(mass_shooting_data,date) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
data_by_month$month_num <- c(4,8,12,2,1,7,6,3,5,11,9,10)
data_by_month <- arrange(data_by_month,month_num)
p <- plot_ly(x = data_by_month$date,y = data_by_month$num_injured,name = "Injured", type = "bar")
p2 <- add_trace(p, x = data_by_month$date, y = data_by_month$num_killed,name = "Casualties")
xaxis <- list(title = "Month")
yaxis <- list(title = "Total Number of People")
layout(p2,barmode = "stack",title = "2015 Mass Shooting Data",yaxis = yaxis, xaxis = xaxis)
---
title: "Mapping Mass Shootings"
output: html_document
---
```{r,message = FALSE,echo = FALSE}
# Require neccescary packages and read-in mass_shooting_data
library(dplyr)
library(knitr)
library(plotly)
mass_shooting_data <- read.csv("/Users/colecansler/Desktop/498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
# Add hover text
mass_shooting_data$hover <- paste(mass_shooting_data$city, ": " ,mass_shooting_data$killed," killed"," and ",mass_shooting_data$injured," injured", sep = "")
# Create table that summarizes data by state
summary_table <- group_by(mass_shooting_data,state) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
# Determine the deadliest incident of gun violence
most_deadly <- mass_shooting_data %>%
filter(killed == max(killed))
```
Mass shootings in the United States have become a growing issue in the last couple of years. In 2015 there were `r NROW(mass_shooting_data)` mass shootings in the United States. The most deadly shooting occured in `r select(most_deadly,city)` where there were `r select(most_deadly,killed)` casualties. Overall there have been `r sum(mass_shooting_data$killed)` lives lost due to mass shootings in the past year. This is a significant crisis facing our country today and something must be done.
`r kable(summary_table)`
```{r,message=FALSE,echo=FALSE}
# The geography of the map
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray85"),
subunitwidth = 1,
countrywidth = 1,
subunitcolor = toRGB("white"),
countrycolor = toRGB("white")
)
# The data of the map
plot_ly(mass_shooting_data,lat = lat,lon = lng,marker = list(size = 2.5*killed + injured, color = "red"),text = hover,hoverinfo = "text", type = 'scattergeo',locationmode = 'USA-states') %>%
# The map layout
#layout(title = '2015 US Mass Shootings', geo = g)
```
```{r,message=FALSE,echo=FALSE}
mass_shooting_data$date <- substring(mass_shooting_data$date,0,3)
data_by_month <- group_by(mass_shooting_data,date) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
data_by_month$month_num <- c(4,8,12,2,1,7,6,3,5,11,9,10)
data_by_month <- arrange(data_by_month,month_num)
p <- plot_ly(x = data_by_month$date,y = data_by_month$num_injured,name = "Injured", type = "bar")
p2 <- add_trace(p, x = data_by_month$date, y = data_by_month$num_killed,name = "Casualties")
xaxis <- list(title = "Month")
yaxis <- list(title = "Total Number of People")
layout(p2,barmode = "stack",title = "2015 Mass Shooting Data",yaxis = yaxis, xaxis = xaxis)
View(mass_shooting_data)
library(dplyr)
library(knitr)
library(plotly)
mass_shooting_data <- read.csv("/Users/colecansler/Desktop/498F/a6-mapping-shootings/data/Mass-Shooting-Data.csv")
# Add hover text
mass_shooting_data$hover <- paste(mass_shooting_data$city, ": " ,mass_shooting_data$killed," killed"," and ",mass_shooting_data$injured," injured", sep = "")
# Create table that summarizes data by state
summary_table <- group_by(mass_shooting_data,state) %>%
summarise(num_shootings = n(), num_injured = sum(injured),num_killed = sum(killed))
# Determine the deadliest incident of gun violence
most_deadly <- mass_shooting_data %>%
filter(killed == max(killed))
View(mass_shooting_data)
View(mass_shooting_data)
incident <- mass_shooting_data %>%
filter(date = "December 2, 2015")
incident <- mass_shooting_data %>%
filter(date == "December 2, 2015")
View(incident)
incident <- mass_shooting_data %>%
filter(date == "December 2, 2015", city == "San Bernardino")
View(mass_shooting_data)
read.csv("/Users/colecansler/Desktop/498F/JEOPARDY_CSV.csv")
jeopardy  <- read.csv("/Users/colecansler/Desktop/498F/JEOPARDY_CSV.csv")
View(jeopardy)
View(jeopardy)
jeopardy  <- read.csv("/Users/colecansler/Desktop/498F/JEOPARDY_CSV.csv")
jeopardy  <- read.csv("/Users/colecansler/Desktop/498F/JEOPARDY_CSV.csv")
View(jeopardy)
shiny::runApp('Desktop/498F/lecture-14-exercises/exercise-2')
data <- read.csv("/Users/colecansler/Downloads/iowa-liquor.csv/iowa-liquor.csv")
View(data)
data <- select(data,DATE,NAME,CITY,COUNTY,CATEGORY.NAME,VENDOR,DESCRIPTION,PACK,LITER.SIZE,STATE.BTL.COST,BTL.PRICE,BOTTLE.QTY,TOTAL)
library(dplyr)
data <- select(data,DATE,NAME,CITY,COUNTY,CATEGORY.NAME,VENDOR,DESCRIPTION,PACK,LITER.SIZE,STATE.BTL.COST,BTL.PRICE,BOTTLE.QTY,TOTAL)
View(data)
View(data)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
data <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
View(data)
make_first_chart <- function(data){
View(data)
View(data)
return (histogram)
}
View(data)
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentpc <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Windows")))/(nrow(data))
summary$percentfreshmen <- (nrow(filter(data, What.is.your.current.class.standing.=="Freshman")))/(nrow(data))
summary$percentsophomore <- (nrow(filter(data, What.is.your.current.class.standing.=="Sophomore")))/(nrow(data))
summary$percentjunior <- (nrow(filter(data, What.is.your.current.class.standing.=="Junior")))/(nrow(data))
summary$percentsenior <- (nrow(filter(data, What.is.your.current.class.standing.=="Senior")))/(nrow(data))
summary$percentdogpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A dog person...")))/(nrow(data))
summary$percentcatpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A cat person....")))/(nrow(data))
summary$percentbothpeople <- (nrow(filter(data, Do.you.consider.yourself.=="Both!")))/(nrow(data))
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
library(dplyr)
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.== Mac)))/(nrow(data))
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.== Mac)))/(nrow(data))
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use. == "Mac")))/(nrow(data))
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use. == "Mac"))/(nrow(data))
summary$percentpc <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Windows")))/(nrow(data))
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use. == "Mac"))/(nrow(data))
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentmac <- nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac"))/nrow(data)
filter(data, What.operating.system.do.you.typically.use.=="Mac")
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
info_function <- function(data) {
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentpc <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Windows")))/(nrow(data))
summary$percentfreshmen <- (nrow(filter(data, What.is.your.current.class.standing.=="Freshman")))/(nrow(data))
summary$percentsophomore <- (nrow(filter(data, What.is.your.current.class.standing.=="Sophomore")))/(nrow(data))
summary$percentjunior <- (nrow(filter(data, What.is.your.current.class.standing.=="Junior")))/(nrow(data))
summary$percentsenior <- (nrow(filter(data, What.is.your.current.class.standing.=="Senior")))/(nrow(data))
summary$percentdogpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A dog person...")))/(nrow(data))
summary$percentcatpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A cat person....")))/(nrow(data))
summary$percentbothpeople <- (nrow(filter(data, Do.you.consider.yourself.=="Both!")))/(nrow(data))
return (summary)
}
info_function(dataset)
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='cdc1996', token='0856F1BBD85EF44E23578637FF4CD483', secret='YlZgJDa4tiSc/JjTfvboFz0x/SFR27Q4asCeUCiB')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
?green
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
iris
data <- iris
View(data)
data <- filter(data,Species == "setosa")
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
data <- iris
View(data)
shiny::runApp('Desktop/498F/Building-Applications')
data <- filter(data, Species == "setosa")
View(data)
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
iris
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
people <- rbinom(n = 1000, size = 1, prob = .2)
people
people <- rbinom(n = 1000, size = 2, prob = .2)
people
rnorm
hist
grades <- rnorm(100 , mean = 80, sd = 10)
hist(grades)
grades <- rnorm(100 , mean = 80, sd = 5)
hist(grades)
grades <- rnorm(100 , mean = 80, sd = 5) hist(grades)
grades <- rnorm(100000 , mean = 50, sd = 5)
hist(grades)
grades <- rnorm(100000000 , mean = 80, sd = 5)
hist(grades)
eye_colors <- sample(colors,100,repace = TRUE)
colors <- c('blue','green',)
colors <- c('blue','green','hazel')
eye_colors <- sample(colors,100,repace = TRUE)
eye_colors <- sample(colors,100,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,repace = TRUE)
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
})
# Run the traffic simulation
source('traffic_sim.R')
shinyServer(function(input, output) {
output$histogram <- renderPlot({
repeat_simulation(
num_sims = input$num_sims,
mean = input$speed,
sd = input$deviation,
num_cars = input$num_cars
)
})
})
# Create UI
shinyUI(fluidPage(
# UI for the traffic simulation
titlePanel('Traffic Simulation'),
# Controls
sidebarLayout(
sidebarPanel(
sliderInput("num_cars", "Number of Cars:",
min = 10, max = 1000, value = 100, step = 10),
sliderInput("num_sims", "Iterations of Simulation",
min = 10, max = 1000, value = 100, step= 10),
sliderInput("speed", "Average Speed",
min = 10, max = 150, value = 40, step= 5),
sliderInput("deviation", "Speed Deviation",
min = 1, max = 20, value = 5, step= 1)
),
# Render plot
mainPanel(
plotOutput("histogram")
)
)
))
shiny::runApp()
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
f# One of many libraries for classification / ML
library(rpart)
# Read in data
homes <- read.csv('part_1_data.csv')
# Use rpart to fit a model: predict `in_sf` using all variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
Wrapping those tasks in functions
# Function to compare values
assess_fit <- function(model, data = homes, outcome = 'in_sf') {
predicted <- predict(model, data, type='class')
accuracy <- length(which(data[,outcome] == predicted)) / length(predicted) * 100
return(paste0(accuracy, '% accurate!'))
}
# Use rpart to fit a model: predict `in_sf` using all other variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
# How well did we do?
assess_fit(basic_fit)
# Get a perfect fit: increase complexity, allow small splits
perfect_fit <- rpart(in_sf ~ ., data = homes, method="class",
control=rpart.control(cp = 0, minsplit=2))
assess_fit(perfect_fit)
What about testing/training data?
# Testing/training data:
sample_size <- floor(.25 * nrow(homes))
train_indicies <- sample(seq_len(nrow(homes)), size = sample_size)
training_data <- data[train_indicies,]
test_data <- data[-train_indicies,]
# Train on training data, test on testing data: basic fit
basic_fit <- rpart(in_sf ~ ., data = training_data, method="class")
assess_fit(basic_fit, data=test_data)
View(assess_fit)
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
# One of many libraries for classification / ML
library(rpart)
# Read in data
homes <- read.csv('part_1_data.csv')
# Use rpart to fit a model: predict `in_sf` using all variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
homes <- read.csv('part_1_data.csv')
install.packages("tmap")
library("tmap")
library("leaflet")
library(tmap)
library(leaflet)
install.packages("tmap")
install.packages("leaflet")
library(tmap)
library(leaflet)
iowageo <- read_shape(file=/Users/colecansler/Desktop/498F/Final-Project/Data/tl_2013_19_place.shp)
iowageo <- read_shape(file="/Users/colecansler/Desktop/498F/Final-Project/Data/tl_2013_19_place.shp")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
data <- read.csv("Data/911Calls.csv")
setwd("/Users/colecansler/Desktop/498F/Seattle-911-Calls-2015")
data <- read.csv("Data/911Calls.csv")
View(data)
unique(data$Event.Clearance.Description)
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp('Scripts')
shiny::runApp()
?setView()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
map <- setView(map,lng = -122.309119, lat = 47.662223, zoom = 14)
shiny::runApp()
shiny::runApp()
shiny::runApp()
