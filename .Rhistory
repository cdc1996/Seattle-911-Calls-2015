summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentmac <- nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac"))/nrow(data)
filter(data, What.operating.system.do.you.typically.use.=="Mac")
dataset <- read.csv("https://raw.githubusercontent.com/INFO-498F/a7-survey-data/master/intro_survey_data.csv")
info_function <- function(data) {
summary <- list()
summary$percentmac <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Mac")))/(nrow(data))
summary$percentpc <- (nrow(filter(data, What.operating.system.do.you.typically.use.=="Windows")))/(nrow(data))
summary$percentfreshmen <- (nrow(filter(data, What.is.your.current.class.standing.=="Freshman")))/(nrow(data))
summary$percentsophomore <- (nrow(filter(data, What.is.your.current.class.standing.=="Sophomore")))/(nrow(data))
summary$percentjunior <- (nrow(filter(data, What.is.your.current.class.standing.=="Junior")))/(nrow(data))
summary$percentsenior <- (nrow(filter(data, What.is.your.current.class.standing.=="Senior")))/(nrow(data))
summary$percentdogpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A dog person...")))/(nrow(data))
summary$percentcatpeople <- (nrow(filter(data, Do.you.consider.yourself.=="A cat person....")))/(nrow(data))
summary$percentbothpeople <- (nrow(filter(data, Do.you.consider.yourself.=="Both!")))/(nrow(data))
return (summary)
}
info_function(dataset)
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
rsconnect::setAccountInfo(name='cdc1996', token='0856F1BBD85EF44E23578637FF4CD483', secret='YlZgJDa4tiSc/JjTfvboFz0x/SFR27Q4asCeUCiB')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
shiny::runApp('Desktop/498F/lecture-15-exercises/example-2')
?green
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/lecture-15-exercises/exercise-1')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
iris
data <- iris
View(data)
data <- filter(data,Species == "setosa")
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
data <- iris
View(data)
shiny::runApp('Desktop/498F/Building-Applications')
data <- filter(data, Species == "setosa")
View(data)
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
iris
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
people <- rbinom(n = 1000, size = 1, prob = .2)
people
people <- rbinom(n = 1000, size = 2, prob = .2)
people
rnorm
hist
grades <- rnorm(100 , mean = 80, sd = 10)
hist(grades)
grades <- rnorm(100 , mean = 80, sd = 5)
hist(grades)
grades <- rnorm(100 , mean = 80, sd = 5) hist(grades)
grades <- rnorm(100000 , mean = 50, sd = 5)
hist(grades)
grades <- rnorm(100000000 , mean = 80, sd = 5)
hist(grades)
eye_colors <- sample(colors,100,repace = TRUE)
colors <- c('blue','green',)
colors <- c('blue','green','hazel')
eye_colors <- sample(colors,100,repace = TRUE)
eye_colors <- sample(colors,100,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,repace = TRUE)
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
eye_colors <- sample(colors,1,replace = TRUE)
eye_colors
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
})
# Run the traffic simulation
source('traffic_sim.R')
shinyServer(function(input, output) {
output$histogram <- renderPlot({
repeat_simulation(
num_sims = input$num_sims,
mean = input$speed,
sd = input$deviation,
num_cars = input$num_cars
)
})
})
# Create UI
shinyUI(fluidPage(
# UI for the traffic simulation
titlePanel('Traffic Simulation'),
# Controls
sidebarLayout(
sidebarPanel(
sliderInput("num_cars", "Number of Cars:",
min = 10, max = 1000, value = 100, step = 10),
sliderInput("num_sims", "Iterations of Simulation",
min = 10, max = 1000, value = 100, step= 10),
sliderInput("speed", "Average Speed",
min = 10, max = 150, value = 40, step= 5),
sliderInput("deviation", "Speed Deviation",
min = 1, max = 20, value = 5, step= 1)
),
# Render plot
mainPanel(
plotOutput("histogram")
)
)
))
shiny::runApp()
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp()
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
shiny::runApp('Desktop/498F/Building-Applications')
f# One of many libraries for classification / ML
library(rpart)
# Read in data
homes <- read.csv('part_1_data.csv')
# Use rpart to fit a model: predict `in_sf` using all variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
Wrapping those tasks in functions
# Function to compare values
assess_fit <- function(model, data = homes, outcome = 'in_sf') {
predicted <- predict(model, data, type='class')
accuracy <- length(which(data[,outcome] == predicted)) / length(predicted) * 100
return(paste0(accuracy, '% accurate!'))
}
# Use rpart to fit a model: predict `in_sf` using all other variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
# How well did we do?
assess_fit(basic_fit)
# Get a perfect fit: increase complexity, allow small splits
perfect_fit <- rpart(in_sf ~ ., data = homes, method="class",
control=rpart.control(cp = 0, minsplit=2))
assess_fit(perfect_fit)
What about testing/training data?
# Testing/training data:
sample_size <- floor(.25 * nrow(homes))
train_indicies <- sample(seq_len(nrow(homes)), size = sample_size)
training_data <- data[train_indicies,]
test_data <- data[-train_indicies,]
# Train on training data, test on testing data: basic fit
basic_fit <- rpart(in_sf ~ ., data = training_data, method="class")
assess_fit(basic_fit, data=test_data)
View(assess_fit)
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
# One of many libraries for classification / ML
library(rpart)
# Read in data
homes <- read.csv('part_1_data.csv')
# Use rpart to fit a model: predict `in_sf` using all variables
basic_fit <- rpart(in_sf ~ ., data = homes, method="class")
homes <- read.csv('part_1_data.csv')
install.packages("tmap")
library("tmap")
library("leaflet")
library(tmap)
library(leaflet)
install.packages("tmap")
install.packages("leaflet")
library(tmap)
library(leaflet)
iowageo <- read_shape(file=/Users/colecansler/Desktop/498F/Final-Project/Data/tl_2013_19_place.shp)
iowageo <- read_shape(file="/Users/colecansler/Desktop/498F/Final-Project/Data/tl_2013_19_place.shp")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015/Scripts')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
#map <- setView(map,lng = coordinates[2], lat = coordinates[1], zoom = 12)
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
lat_and_lng("the ave")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
lat_and_lng("the ave")
c <- lat_and_lng("the ave")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
lat_and_lng("the ave")
lat_and_lng <- function (place){
if (place == "the ave"){
lat_lng <- c(47.661281,-122.313154,18)
}
if (place == "space needle"){
lat_lng <- c(47.620423,-122.349355,18)
}
if (place == "china town"){
lat_lng <- c(47.598409,-122.325060,18)
}
return (lat_lng)
}
lat_and_lng <- function (place){
if (place == "the ave"){
lat_lng <- c(47.661281,-122.313154,18)
}
if (place == "space needle"){
lat_lng <- c(47.620423,-122.349355,18)
}
if (place == "china town"){
lat_lng <- c(47.598409,-122.325060,18)
}
return (lat_lng)
}
lat_and_lng("the ave")
lat_and_lng("space needle")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
?leafletProxy
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
library(RDSTK)
?street2coordinates
street2coordinates("2543 Graystone Place, Simi Valley, CA 93065")
?geocode
library(geocode)
library(ggmap)
?geocode
geocode("Seattle, WA")
geocode("523 97th AVE NE")
geocode("523 97th AVE NE")[1]
library(ggmap)
geocode("Space Needle")
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
geocode("aesf")
n <- geocode("FAef")
View(n)
length(n)
n[1]
is.na(n)
in.na(n[1])
is.na(n[1])
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
?layout
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
?plotlyOutput
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
shiny::runApp('Desktop/498F/Seattle-911-Calls-2015')
setwd("/Users/colecansler/Desktop/498F/Seattle-911-Calls-2015")
data <- read.csv("Data/911Calls.csv")
types <- unique(data$Event.Clearance.Group)
summary <- group_by(data, Event.Clearance.Group, Event.Clearance.Description) %>%
summarize(instances = n())
state_data <- plot_ly(summary,
x = Event.Clearance.Group,
y = instances,
name = "Crime",
type = "bar",
text = paste(Event.Clearance.Group, ":", instances, "instances", sep = " "),
hoverinfo = "text"
)
state_data
m1 <- list (
l = 100,
r = 50,
b = 325,
t = 75,
pad = 4
)
#set x axis title
x1 <- list (
title = "Category of Crime",
titlefont = f
)
#set y axis title
y1 <- list (
title = "Instances",
titlefont = f
)
state_data <- layout(state_data, title = "Breakdown of 2015 Seattle 911 Calls by Category", xaxis = x1, yaxis = y1, margin = m1)
state_data
m1 <- list (
b = 125,
pad = 4
)
types <- unique(data$Event.Clearance.Group)
summary <- group_by(data, Event.Clearance.Group, Event.Clearance.Description) %>%
summarize(instances = n())
state_data <- plot_ly(summary,
x = Event.Clearance.Group,
y = instances,
name = "Crime",
type = "bar",
text = paste(Event.Clearance.Group, ":", instances, "instances", sep = " "),
hoverinfo = "text"
)
state_data
m1 <- list (
b = 125,
pad = 4
)
#set x axis title
x1 <- list (
title = "Category of Crime",
titlefont = f
)
#set y axis title
y1 <- list (
title = "Instances",
titlefont = f
)
state_data <- layout(state_data, title = "Breakdown of 2015 Seattle 911 Calls by Category", xaxis = x1, yaxis = y1, margin = m1)
state_data
m1 <- list (
b = 200,
pad = 4
)
state_data <- layout(state_data, title = "Breakdown of 2015 Seattle 911 Calls by Category", xaxis = x1, yaxis = y1, margin = m1)
state_data
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("Data/911Calls.csv")
types <- unique(data$Event.Clearance.Group)
summary <- group_by(data, Event.Clearance.Group, Event.Clearance.Description) %>%
summarize(instances = n())
View(summary)
types <- unique(data$Event.Clearance.Group)[1:21]
summary <- group_by(data, Event.Clearance.Group, Event.Clearance.Description) %>%
summarize(instances = n())
state_data <- plot_ly(summary,
x = Event.Clearance.Group,
y = instances,
name = "Crime",
type = "bar",
text = paste(Event.Clearance.Group, ":", instances, "instances", sep = " "),
hoverinfo = "text"
)
state_data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("Data/911Calls.csv")
summary <- group_by(data, Event.Clearance.Group, Event.Clearance.Description) %>%
summarize(instances = n())
View(summary)
summary <- group_by(data, Event.Clearance.Group) %>%
summarize(instances = n())
View(summary)
state_data <- plot_ly(summary,
x = Event.Clearance.Group,
y = instances,
name = "Crime",
type = "bar",
text = paste(Event.Clearance.Group, ":", instances, "instances", sep = " "),
hoverinfo = "text"
)
m1 <- list (
b = 200,
pad = 4
)
#set x axis title
x1 <- list (
title = "Category of Crime",
titlefont = f
)
#set y axis title
y1 <- list (
title = "Instances",
titlefont = f
)
state_data <- layout(state_data, title = "Breakdown of 2015 Seattle 911 Calls by Category", xaxis = x1, yaxis = y1, margin = m1)
state_data
View(summary)
summary1 <- slice(summary,1:21)
state_data <- plot_ly(summary1,
x = Event.Clearance.Group,
y = instances,
name = "Crime",
type = "bar",
text = paste(Event.Clearance.Group, ":", instances, "instances", sep = " "),
hoverinfo = "text"
)
m1 <- list (
b = 200,
pad = 4
)
#set x axis title
x1 <- list (
title = "Category of Crime",
titlefont = f
)
#set y axis title
y1 <- list (
title = "Instances",
titlefont = f
)
state_data <- layout(state_data, title = "Breakdown of 2015 Seattle 911 Calls by Category", xaxis = x1, yaxis = y1, margin = m1)
state_data
shiny::runApp()
state_data <- plot_ly(summary,
rg
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
